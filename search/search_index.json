{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to QDM","text":"<p>QDM is a modern PHP 8 Quick Data Model. It is a simple and fast way to create a data model for your PHP project. It is based on PHP 8 Attributes to define the data model. Its main purpose is to serialize and deserialize data from and to JSON. It is also possible to validate the data model. And do some basic data manipulation.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>composer require siktec/qdm\n</code></pre>"},{"location":"#a-sneak-peak","title":"A Sneak Peak","text":"<pre><code>&lt;?php declare(strict_types=1);\n\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nuse QDM\\Attr;\n\n/**\n * A Car Data Model\n */\nclass Car extends QDM\\DataModel implements \\ArrayAccess\n{\n    use QDM\\Traits\\ArrayAccessTrait;\n\n    public bool $is_valid = false;        // Not a DataPoint so for internal use only\n\n    public function __construct(\n\n        #[Attr\\DataPoint(required: true)] // This is a required DataPoint can not be null\n        public ?string $model = null,\n\n        #[Attr\\DataPoint]\n        public ?int $year = null,         // A Public DataPoint that will be exported and imported\n\n        #[Attr\\DataPoint]\n        protected ?string $code = null   // A Protected DataPoint that will imported but not exported\n    ) { }\n}\n\n/**\n * A Car Collection\n */\n#[Attr\\Collect(models: Car::class)] // Can also be a \"mixed\" or an array of types\nclass CarLot extends QDM\\Collection { } // Simple Collection class we can add cars to it\n\n/**\n * A Car Dealership Data Model\n */\nclass Dealership extends QDM\\DataModel implements \\ArrayAccess\n{\n    use QDM\\Traits\\ArrayAccessTrait; // Bring some more functionality to the DataModel\n\n    #[Attr\\DataPoint]\n    public ?CarLot $car_lot = null; // A Public DataPoint that will be exported and imported\n\n    public function __construct(\n\n        #[Attr\\DataPoint(required: true)] // This is a required DataPoint can not be null\n        public ?string $name = null,\n\n        #[Attr\\DataPoint(required: true)] // This is a required DataPoint can not be null\n        public ?string $address = null,\n    )\n    {\n        $this-&gt;car_lot = new CarLot(); //Initialize the CarLot Collection\n    }\n}\n\n// Create a new Car Dealership\n$dealership1 = new Dealership(\n    name: \"My Car Dealership\",\n    address: \"123 Main St.\"\n);\n\n// Add a new Car to the Car Dealership\n$dealership1-&gt;car_lot[\"car_one\"] = new Car(\n    model: \"Ford Bronco\",\n    year: 2021,\n    code: \"1234\"\n);\n// OR:\n$dealership1-&gt;car_lot-&gt;add(new Car(\n    model: \"Ford Limo\",\n    year: 2021,\n    code: \"4321\"\n), \"car_two\");\n// OR:\n$dealership1-&gt;car_lot-&gt;extend([\n    \"car_three\" =&gt; [\n        \"model\" =&gt; \"Ford F150\",\n        \"year\" =&gt; 2021,\n        \"code\" =&gt; \"5678\"\n    ]\n]);\n\n// AND MANY MORE WAYS TO PRAGMATICALLY INTERACT WITH THE DATA MODEL\n\n// Export the Car Dealership to JSON (we could also export to an array)\n$json1 = $dealership1-&gt;toJson(pretty : true); \necho $json1;\n/* \n{\n    \"name\":\"My Car Dealership\",\n    \"address\":\"123 Main St.\",\n    \"car_lot\": {\n        \"car_one\":{\n            \"model\":\"Ford Bronco\",\n            \"year\":2021\n        },\n        \"car_two\":{\n            \"model\":\"Ford Limo\",\n            \"year\":2021\n        },\n        \"car_three\":{\n            \"model\":\"Ford F150\",\n            \"year\":2021\n        }\n    }\n}\n*/\n\n// Both ways work the same\n$dealership2 = new Dealership();\n$validation = [];\n// Import the Car Dealership from JSON (we could also import from an array)\n$success = $dealership2-&gt;from($json1, $validation);\nif (!$success) {\n    echo \"Something went wrong\";\n    print_r($validation); // This will contain all the errors the basic validation are done by the DataModel class\n    exit;\n}\nif ($json1 === $dealership2-&gt;toJson(pretty : true)) {\n    echo \"They are the same :)\";\n} else {\n    echo \"They are different\";\n}\n\n// Obviously we can also do this:\n$dealership3 = new Dealership();\n$dealership3-&gt;from([ // Import the Car Dealership from an array\n    \"name\" =&gt; \"My Car Dealership\",\n    \"address\" =&gt; \"123 Main St.\",\n    \"car_lot\" =&gt; [\n        \"car_one\" =&gt; [\n            \"model\" =&gt; \"Ford Bronco\",\n            \"year\" =&gt; 2021,\n            \"code\" =&gt; \"1234\"\n        ],\n        \"car_two\" =&gt; [\n            \"model\" =&gt; \"Ford Limo\",\n            \"year\" =&gt; 2021,\n            \"code\" =&gt; \"4321\"\n        ],\n        \"car_three\" =&gt; [\n            \"model\" =&gt; \"Ford F150\",\n            \"year\" =&gt; 2021,\n            \"code\" =&gt; \"5678\"\n        ]\n    ]\n]);\n\n/*\n There a lot more to this library :)\n filters, setters, getters, collections, custom methods for validation, etc.\n Many moreways to interact with the data model such as array access, iterators, etc.\n Many more ways to export and import data from and to the data model.\n SO CHECK OUT THE DOCUMENTATION AND EXAMPLES\n*/\n</code></pre>"}]}